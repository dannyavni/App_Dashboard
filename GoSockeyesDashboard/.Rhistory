summary(fit.auto.arima)
0.5489+(1-0.4705+0.5305)
0.5489*(1-0.4705+0.5305)
0.5489*(1-0.4705)*(1-0.5305)
0.5489*(1-0.4705)*(1+0.5305)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(urca)
library(rdatamarket)
wmurders %>% diff(lag=2) %>% mean()
autoplot(wmurders)
wmurders %>% ggtsdisplay()
wmurders %>% diff(lag=1) %>% ggtsdisplay()
wmurders %>% diff(lag=2) %>% ggtsdisplay()
wmurders %>% ur.kpss() %>% summary()
ndiffs(wmurders)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(urca)
library(rdatamarket)
autoplot(wmurders)
wmurders %>% ggtsdisplay()
wmurders %>% diff(lag=1) %>% ggtsdisplay()
wmurders %>% diff(lag=2) %>% ggtsdisplay()
wmurders %>% ur.kpss() %>% summary()
ndiffs(wmurders)
fit.man.arima <- Arima(wmurders, order=c(0,2,2))
summary(fit.man.arima)
checkresiduals(fit.man.arima)
th1 <- -1.0181
th2 <- 0.1470
et1 <- fit.man.arima$residuals[55]
et2 <- fit.man.arima$residuals[54]
yt1 <- wmurders[55]
yt2 <- wmurders[54]
ytdd <- th1 * et1 + th2 * et2
yt <- ytdd +2*yt1 - yt2
yt
et2 <- et1
et1 <- 0
yt2 <- yt1
yt1 <- yt
ytdd <- th1 * et1 + th2 * et2
yt <- ytdd +2*yt1 - yt2
yt
yt2 <- yt1
yt1 <- yt
ytdd <- 0
yt <- ytdd +2*yt1 - yt2
yt
f <- forecast(fit.man.arima, h=3)
f$mean[1]
f$mean[2]
f$mean[3]
autoplot(forecast(fit.man.arima, h=3))
fit.auto.arima <- auto.arima(wmurders, stepwise = FALSE, approximation = FALSE, seasonal = FALSE )
summary(fit.auto.arima)
checkresiduals(fit.auto.arima)
autoplot(usgdp)
lambda <- BoxCox.lambda(usgdp)
autoplot(BoxCox(usgdp, lambda))
usgdp.bx <- BoxCox(usgdp, lambda)
fit.arima.auto <- auto.arima(usgdp.bx)
summary(fit.arima.auto)
usgdp.bx %>% ggtsdisplay()
summary(Arima(usgdp.bx, order=c(2,2,0)))
summary(Arima(usgdp.bx, order=c(2,2,1)))
summary(Arima(usgdp.bx, order=c(2,2,2)))
fit.arima.man <- Arima(usgdp.bx, order=c(2,2,1))
checkresiduals(fit.arima.man)
autoplot(usgdp.bx) +
autolayer(forecast(fit.arima.man, h=12))
autoplot(usgdp) +
autolayer(forecast(ets(usgdp), h=12))
autoplot(austourists)
austourists %>% ggtsdisplay()
austourists %>% diff(lag = 4) %>% ggtsdisplay()
austourists %>% diff(lag = 4) %>% ndiffs()
fit.auto.arima <- auto.arima(austourists)
summary(fit.auto.arima)
wi <- ts(rdatamarket::dmseries("http://bit.ly/1yJ3NRU")[,1],start=c(1961,1), frequency=12)
autoplot(wi)
wi %>% ggtsdisplay()
ndiffs(wi)
wi %>% diff(lag=12) %>% diff() %>% ggtsdisplay()
fit.man.arima <- Arima(wi, order= c(0,1,1), seasonal = c(1,1,1))
summary(fit.man.arima)
checkresiduals(fit.man.arima)
fcast.man.arima <- forecast(fit.man.arima, h=48)
autoplot(fcast.man.arima)
fit.man.ets <- ets(wi,model = "MAA")
checkresiduals(fit.man.ets)
fcast.man.ets <- forecast(fit.man.ets, h=48)
autoplot(fcast.man.ets)
autoplot(wi) +
autolayer(fcast.man.ets, series = "ETS(M,A,A)", PI=FALSE) +
autolayer(fcast.man.arima, series = "ARIMA(0,1,1)(1,1,1)[12]", PI=FALSE) +
ggtitle("Wisconsin Visitors 4 Year Forecast")
autoplot(advert, facets = TRUE)
fit.tslm <- tslm(sales ~ advert, data = advert)
checkresiduals(fit.tslm)
checkresiduals(fit.tslm)
fit.man.arima <- Arima(advert[,"sales"], xreg=advert[,"advert"], order=c(0,0,0))
checkresiduals(fit.man.arima)
fit.auto.arima <- auto.arima(advert[,"sales"], xreg=advert[,"advert"])
checkresiduals(fit.auto.arima)
autoplot(forecast(fit.auto.arima, h=6, xreg=rep(10,6)))
knot <- length(window(huron, end=(1920)))
T <- length(huron)
x1 <- seq(T)
x2 <- pmax(0, x1-knot)
fit <- auto.arima(huron, xreg = cbind(x1, x2))
summary(fit)
#adapted from https://robjhyndman.com/hyndsight/piecewise-linear-trends/
b0 <- coef(fit)["intercept"]
b1 <- coef(fit)["x1"]
b2 <- coef(fit)["x2"]
t <- seq(T+30)
trend <- ts(b0 + b1*t + b2*pmax(0,t-knot), start=start(huron))
fc <- forecast(fit, h=30, xreg = cbind(max(x1)+seq(30), max(x2)+seq(30)))
plot(fc, main="Piecewise linear trend with AR(1) errors")
lines(trend, col='red')
avg_cost <- motel[,2]*1000 / motel[,1]
idx <- 1
monthly_cpi <- vector()
for (i in 1:(length(cpimel)-1)) {
delta <- (cpimel[i+1] - cpimel[i]) / 3
monthly_cpi[idx]   <- cpimel[i]
monthly_cpi[idx+1] <- cpimel[i] + delta
monthly_cpi[idx+2] <- cpimel[i] + delta * 2
idx <- idx + 3
}
monthly_cpi[idx:(idx+2)] = rep(cpimel[62],3)
motel_cost <- ts(cbind(avg_cost,monthly_cpi),
names = c("avg_cost","monthly_cpi"),
start = c(1980,1), frequency = 12)
autoplot(motel_cost, facets = TRUE)
motel_cost.log <- ts(cbind(log(avg_cost),log(monthly_cpi)),
names = c("log_avg_cost","log_monthly_cpi"),
start = c(1980,1), frequency = 12)
autoplot(motel_cost.log, facets = TRUE)
lambda <- BoxCox.lambda(motel_cost)
lambda
motel_cost.log[,1] %>% ggtsdisplay()
motel_cost.log[,1] %>% diff(lag=12) %>% ndiffs()
fit.man.arima <- Arima(motel_cost.log[,1], order = c(1,0,1), seasonal = c(0,1,1),
xreg = motel_cost.log[,2])
summary(fit.man.arima)
checkresiduals(fit.man.arima)
l <- length(monthly_cpi)
slope <- (monthly_cpi[l] - monthly_cpi[l-12])/12
monthly_cpi[(l+1):(l+12)] <- rep(monthly_cpi[l],12)+slope*(1:12)
motel.fcast <- forecast(fit.man.arima, h=12, xreg = log(monthly_cpi[(l+1):(l+12)]))
autoplot(motel.fcast)
gasoline.t <- time(gasoline)
gasoline.t.break1 <- which.min(ifelse(gasoline.t - 2007.5 < 0, Inf, gasoline.t - 2007.5))
gasoline.t.break2 <- which.min(ifelse(gasoline.t - 2012.5 < 0, Inf, gasoline.t - 2012.5))
l   <- length(gasoline)
t   <- seq(l)
tb1 <- c(rep(0,l-gasoline.t.break1), seq(gasoline.t.break1))
tb2 <- c(rep(0,l-gasoline.t.break2), seq(gasoline.t.break2))
fit1.pw <- tslm(gasoline ~ t + fourier(gasoline, K=12))
fit2.pw <- tslm(gasoline ~ t + tb1 + fourier(gasoline, K=12))
fit3.pw <- tslm(gasoline ~ t + tb2 + fourier(gasoline, K=12))
fit4.pw <- tslm(gasoline ~ t + tb1 + tb2 + fourier(gasoline, K=12))
CV(fit1.pw)
CV(fit2.pw)
CV(fit3.pw)
CV(fit4.pw)
plots  <- list()
plots[[1]] <- autoplot(gasoline) + autolayer(fitted(fit1.pw), series = "0 Knots")
plots[[2]] <- autoplot(gasoline) + autolayer(fitted(fit2.pw), series = "1a Knots")
plots[[3]] <- autoplot(gasoline) + autolayer(fitted(fit3.pw), series = "1b Knots")
plots[[4]] <- autoplot(gasoline) + autolayer(fitted(fit4.pw), series = "2 Knots")
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]], plots[[4]], nrow=2, ncol=2)
#commented below are failed attempts to receive white noise residuals by differnt models with knots and
#trend
#fit.auto.arima <- auto.arima(gasoline, xreg = cbind(t, tb1, fourier(gasoline, K=12)), seasonal = FALSE)
#checkresiduals(fit.auto.arima)
#gasoline.trim <- window(gasoline, start=c(2000,1))
#gasoline.trim.t <- time(gasoline.trim)
#gasoline.trim.break1 <- which.min(ifelse(gasoline.trim - 2007.5 < 0, Inf, gasoline.trim - 2007.5))
#l   <- length(gasoline.trim)
#t   <- seq(l)
#tb1 <- c(rep(0,l-gasoline.trim.t.break1), seq(gasoline.trim.t.break1))
#fit.auto.arima <- auto.arima(gasoline.trim, xreg = cbind(t, tb1, fourier(gasoline.trim, K=12)), seasonal = FALSE)
#checkresiduals(fit.auto.arima)
#fit.auto.arima <- auto.arima(gasoline.trim, xreg = cbind(t, fourier(gasoline.trim, K=12)), seasonal = FALSE)
#checkresiduals(fit.auto.arima)
gasoline.trim <- window(gasoline, start=c(2012,1))
l   <- length(gasoline.trim)
t   <- seq(l)
fit.auto.arima <- auto.arima( gasoline.trim, xreg = cbind(t, fourier(gasoline.trim, K=12)), seasonal = FALSE)
checkresiduals(fit.auto.arima)
forecast.auto.arima <- forecast(fit.auto.arima, h=52, xreg = cbind(max(t) + seq(52), fourier(gasoline.trim, K=12, h=52)))
autoplot(gasoline.trim) +
autolayer(forecast.auto.arima, series = "Auto Arima Fit")
retail    <- readxl::read_excel("retail.xlsx", skip=1)
retail_ts <- ts(retail[,"A3349338X"], frequency=12, start=c(1982,4))
lambda <- BoxCox.lambda(retail_ts)
autoplot(BoxCox(retail_ts, lambda))
retail    <- readxl::read_excel("retail.xlsx", skip=1)
retail_ts <- ts(retail[,"A3349338X"], frequency=12, start=c(1982,4))
lambda <- BoxCox.lambda(retail_ts)
autoplot(BoxCox(retail_ts, lambda))
plots <- list()
for (i in seq(6)) {
fit <- auto.arima(retail_ts, xreg = fourier(retail_ts, K = i),
seasonal = FALSE, lambda = "auto")
plots[[i]] <- autoplot(forecast(fit, xreg=fourier(retail_ts, K=i, h=24))) +
xlab(paste("K=",i," AICC=",round(fit[["aicc"]],2), " MASE=", round(accuracy(fit)[6],2))) +
ylab("") #+ ylim(1.5,4.7)
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
fit.auto.arima <- auto.arima(retail_ts, xreg = fourier(retail_ts, K = 6), seasonal = FALSE, lambda = "auto")
checkresiduals(fit.auto.arima)
retail_ts.train <- window(retail_ts, end=c(2012,12))
retail_ts.test  <- window(retail_ts, start=c(2013,1))
fit.auto.arima.fourier  <- auto.arima(retail_ts.train, xreg = fourier(retail_ts.train, K = 6),
seasonal = FALSE, lambda = "auto")
fc.auto.arima.fourier <- forecast(fit.auto.arima.fourier, h=12, xreg=fourier(retail_ts.test, K=6, h=12))
accuracy(fc.auto.arima.fourier, retail_ts.test)
fit.auto.arima  <- auto.arima(retail_ts.train, lambda = "auto")
summary(fit.auto.arima)
fc.auto.arima   <- forecast(fit.auto.arima, h=12)
accuracy(fc.auto.arima, retail_ts.test)
fit.auto.ets    <- ets(retail_ts.train, lambda = "auto")
fc.auto.ets     <- forecast(fit.auto.ets, h=12)
checkresiduals(fc.auto.ets)
accuracy(fc.auto.ets, retail_ts.test)
autoplot(window(retail_ts.train, start=c(2010,1)), series = "Train") +
autolayer(retail_ts.test, linetype="dashed", series = "Test") +
autolayer(fc.auto.arima.fourier, PI=FALSE, series = "ARIMA(2,1,2) with 6 term Fourier") +
#  autolayer(fc.auto.arima, PI=FALSE, series = "Seasonal ARIMA(1,1,0)(1,1,0)[12] ") +
autolayer(fc.auto.ets, PI=FALSE, series = "ETS(A,A,A)") +
ggtitle("Retail train/test accuracy")
install.packages("prophet")
install.packages("seasonal")
install.packages("tsouliers")
install.packages("tsoutliers")
install.packages("missForrest")
install.packages("missForest")
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(seasonal)
library(tsoutliers)
library(prophet)
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(seasonal)
library(tsoutliers)
library(prophet)
library(hts)
install.packages("hts")
knitr::opts_chunk$set(echo = TRUE)
library(fpp2)
library(seasonal)
library(tsoutliers)
library(prophet)
library(hts)
30*21/22
720/9
510/6
520/6
q()
plot([1,2,3],[100,200,300])
df <- data.frame(matrix(ncol = 3, nrow = 5))
colnames(df) <- c('Phase','Zip','Median Income')
df[1,] = c(1,60657,55647)
df[1,] = c(1,60657,55647)
df[2,] = c(1,60657,55647)
df[3,] = c(1,60657,55647)
df[4,] = c(1,60657,55647)
df[5,] = c(1,60657,55647)
df[1,] = c(1,60657,55647)
df[2,] = c(2,60613,48381)
df[3,] = c(3,60618,41355)
df[4,] = c(4,60611,69889)
df[5,] = c(5,60618,41355)
df <- data.frame(matrix(ncol = 3, nrow = 5))
colnames(df) <- c('Phase','Zip','Median_Income')
df[1,] = c(1,60657,55647)
df[2,] = c(2,60613,48381)
df[3,] = c(3,60618,41355)
df[4,] = c(4,60611,69889)
df[5,] = c(5,60618,41355)
plot(df$Phase, df$Median_Income)
library(ggplot2)
attach(df)
ggplot(data=df, aes(x=Phase, y=Median_Income)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=Phase, y=Median_Income))
+ geom_bar(stat="identity", fill="steelblue")
ggplot(data=df, aes(x=Phase, y=Median_Income))
+ geom_bar(stat="identity", fill="steelblue")
ggplot(data=df, aes(x=Phase, y=Median_Income))
+ geom_bar(stat="identity")
ggplot(data=df, aes(x=Phase, y=Median_Income)) + geom_bar(stat="identity")
ggplot(data=df, aes(x=Phase, y=Median_Income)) +
geom_bar(stat="identity")
ggplot(data=df, aes(x=Phase, y=Median_Income)) +
geom_bar(stat="identity", fill="steelblue")
ggplot(data=df, aes(x=Phase, y=Median_Income)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=Zip), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(data=df, aes(x=Phase, y=Median_Income)) +
geom_bar(stat="identity", fill="steelblue") +
geom_text(aes(label=Zip), vjust=1.6, color="white", size=3.5) +
ggtitle("Dan's ZipWho History") +
theme_minimal()
shiny::runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
icon("trash")
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
dollar(1000000)
?dollar
??dollar
library(scales)
dollar(1000000)
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
shiny::runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
library(shinyWidgets)
install.packages("shinyWidgets")
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/Shiny')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
install.packages("shinydashboard")
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?updateTextAreaInput
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?textInput
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?updateTextAreaInput
?updateTextInput
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?box
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?validColors
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
?position
?geom_bar
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
install.packages("map")
install.packages("leaflet")
install.packages("leaflet")
shiny::runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
runApp('Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard')
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
install.packages("geojsonio")
install.packages("geojsonio")
library(geojsonio)
states <- geojsonio::geojson_read("json/us-states.geojson", what = "sp")
class(states)
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
setwd("~/Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard")
states <- geojsonio::geojson_read("us-states.geojson", what = "sp")
states <- geojsonio::geojson_read("us-states.json", what = "sp")
!ls
states <- geojsonio::geojson_read("us-states.js", what = "sp")
states <- geojsonio::geojson_read("geojson.js", what = "sp")
class(states)
names(states)
library(tidyverse)
install.packages("tidyverse")
library(leaflet)
library(geojsonio)
library(tidyverse)
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addProviderTiles("MapBox", options = providerTileOptions(
id = "mapbox.light",
accessToken = Sys.getenv('MAPBOX_ACCESS_TOKEN')))
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m %>% addPolygons()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
states <- geojsonio::geojson_read("us-states.js", what = "sp")
setwd("~/Dropbox/MSPA/498/App_Dashboard/GoSockeyesDashboard")
states <- geojsonio::geojson_read("us-states.js", what = "sp")
states <- geojsonio::geojson_read("geojson.js", what = "sp")
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
states$density
states$name
states[48, "density"] = 20000
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
states$name
states$density
states[48, "density"] = 20000
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
pal
pal(density())
pal(density
)
~pal(density
)
states <- geojsonio::geojson_read("geojson.js", what = "sp")
states[48, "density"] = 20000
m <- leaflet(states) %>%
setView(-96, 37.8, 4) %>%
addTiles()
bins <- c(0, 10, 20, 50, 100, 200, 500, 1000, Inf)
pal <- colorBin("YlOrRd", domain = states$density, bins = bins)
m %>% addPolygons(
fillColor = ~pal(density),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7)
shiny::runApp()
runApp()
source(map.R)
source(map)
runApp()
runApp()
?addPolygons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
